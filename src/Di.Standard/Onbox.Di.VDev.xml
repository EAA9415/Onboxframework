<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Onbox.Di.VDev</name>
    </assembly>
    <members>
        <member name="T:Onbox.Di.VDev.Container">
            <summary>
            Onbox's IOC container implementation
            </summary>d
        </member>
        <member name="F:Onbox.Di.VDev.Container.transientTypes">
            <summary>
            The list of current transient types currently registered
            </summary>
        </member>
        <member name="F:Onbox.Di.VDev.Container.scopedTypes">
            <summary>
            The list of current scoped types currently registered
            </summary>
        </member>
        <member name="F:Onbox.Di.VDev.Container.singletonInstances">
            <summary>
            The list of current singleton instances currently registered
            </summary>
        </member>
        <member name="F:Onbox.Di.VDev.Container.singletonTypes">
            <summary>
            The list of current singleton types currently registered
            </summary>
        </member>
        <member name="F:Onbox.Di.VDev.Container.scopedInstances">
            <summary>
            The list of current scoped instances currently registered
            </summary>
        </member>
        <member name="M:Onbox.Di.VDev.Container.AddSingleton(System.Type)">
            <summary>
            Adds an implementation as a singleton on the container.
            </summary>
            <remarks>It can not be an abstract or interface type</remarks>
            <param name="implementationType">The type that will be added</param>
            <exception cref="T:System.InvalidOperationException">Thrown when using a abstract class or an interface</exception>
        </member>
        <member name="M:Onbox.Di.VDev.Container.AddSingleton``1">
            <summary>
            Adds an implementation as a singleton on the container.
            </summary>
            <remarks>It can not be an abstract or interface type</remarks>
            <typeparam name="TImplementation"></typeparam>
            <exception cref="T:System.InvalidOperationException">Thrown when using a abstract class or an interface</exception>
        </member>
        <member name="M:Onbox.Di.VDev.Container.AddSingleton``1(``0)">
            <summary>
            Adds an instance as a singleton on the container
            </summary>
            <typeparam name="TImplementation"></typeparam>
            <param name="instance"></param>
        </member>
        <member name="M:Onbox.Di.VDev.Container.AddSingleton(System.Type,System.Type)">
            <summary>
            Adds an implementation to a contract as a singleton on the container
            </summary>
            <remarks>It can not be an abstract or interface type</remarks>
            <param name="contractType">Contract type</param>
            <param name="implementationType">Implementation type</param>
            <exception cref="T:System.InvalidOperationException">Thrown when using a abstract class or an interface</exception>
        </member>
        <member name="M:Onbox.Di.VDev.Container.AddSingleton``2">
            <summary>
            Adds an implementation to a contract as a singleton on the container
            </summary>
            <remarks>It can not be an abstract or interface type</remarks>
            <typeparam name="TContract"></typeparam>
            <typeparam name="TImplementation"></typeparam>
            <exception cref="T:System.InvalidOperationException">Thrown when using a abstract class or an interface</exception>
        </member>
        <member name="M:Onbox.Di.VDev.Container.AddSingleton``2(``1)">
            <summary>
            Adds an instance as a singleton on the container
            </summary>
            <typeparam name="TContract"></typeparam>
            <typeparam name="TImplementation"></typeparam>
        </member>
        <member name="M:Onbox.Di.VDev.Container.AddScoped(System.Type,System.Type)">
            <summary>
            Adds a scoped implementation to a contract on the container.
            </summary>
        </member>
        <member name="M:Onbox.Di.VDev.Container.AddScoped``2">
            <summary>
            Adds a scoped implementation to a contract on the container.
            </summary>
        </member>
        <member name="M:Onbox.Di.VDev.Container.AddScoped(System.Type)">
            <summary>
            Adds a scoped implementation on the container.
            </summary>
        </member>
        <member name="M:Onbox.Di.VDev.Container.AddScoped``1">
            <summary>
            Adds a scoped implementation on the container.
            </summary>
        </member>
        <member name="M:Onbox.Di.VDev.Container.AddTransient(System.Type)">
            <summary>
            Adds an implementation as transient on the container
            </summary>
            <remarks>It can not be an abstract or interface type</remarks>
            <type name="implementationType"></type>
            <exception cref="T:System.InvalidOperationException">Thrown when using a abstract class or an interface</exception>
        </member>
        <member name="M:Onbox.Di.VDev.Container.AddTransient``1">
            <summary>
            Adds an implementation as a transient on the container.
            </summary>
            <remarks>It can not be an abstract or interface type</remarks>
            <typeparam name="TImplementation"></typeparam>
            <exception cref="T:System.InvalidOperationException">Thrown when using a abstract class or an interface</exception>
        </member>
        <member name="M:Onbox.Di.VDev.Container.AddTransient(System.Type,System.Type)">
            <summary>
            Adds an implementation to a contract as transient on the container
            </summary>
            <remarks>It can not be an abstract or interface type</remarks>
            <type name="contractType"></type>
            <type name="implementationType"></type>
            <exception cref="T:System.InvalidOperationException">Thrown when using a abstract class or an interface</exception>
        </member>
        <member name="M:Onbox.Di.VDev.Container.AddTransient``2">
            <summary>
            Adds an implementation to a contract as transient on the container
            </summary>
            <remarks>It can not be an abstract or interface type</remarks>
            <typeparam name="TContract"></typeparam>
            <typeparam name="TImplementation"></typeparam>
            <exception cref="T:System.InvalidOperationException">Thrown when using a abstract class or an interface</exception>
        </member>
        <member name="M:Onbox.Di.VDev.Container.HasSingletonInstance``1">
            <summary>
            Checks if a singleton instance for this type is registered in the container
            </summary>
            <typeparam name="T">The target type, abstract or concrete</typeparam>
            <returns>true if the type is registered, false if not</returns>
        </member>
        <member name="M:Onbox.Di.VDev.Container.HasScopedInstance``1">
            <summary>
            Checks if a scoped instance for this type is registered in the container
            </summary>
            <typeparam name="T">The target type, abstract or concrete</typeparam>
            <returns>true if the type is registered, false if not</returns>
        </member>
        <member name="M:Onbox.Di.VDev.Container.ResolveOrNull``1">
            <summary>
            Asks the container for a new instance of a type
            <br>It will return null if any non registered abstract type in the dependency tree</br>
            </summary>
        </member>
        <member name="M:Onbox.Di.VDev.Container.Resolve``1">
            <summary>
            Asks the container for a new instance of a type
            </summary>
        </member>
        <member name="M:Onbox.Di.VDev.Container.Resolve(System.Type)">
            <summary>
            Asks the container for a new instance of a type
            </summary>
        </member>
        <member name="M:Onbox.Di.VDev.Container.Clear">
            <summary>
            Clears and releases resources from the container
            </summary>
        </member>
        <member name="M:Onbox.Di.VDev.Container.Dispose">
            <summary>
            Clears and releases resources from the container
            </summary>
        </member>
        <member name="M:Onbox.Di.VDev.Container.CreateScope">
            <summary>
            Creates a scoped context copy of this container
            </summary>
        </member>
        <member name="M:Onbox.Di.VDev.Container.IsScope">
            <summary>
            Reports if this container is a scope of a container
            </summary>
        </member>
        <member name="M:Onbox.Di.VDev.Container.EnableConsolePrinting(System.Boolean)">
            <summary>
            Enables or disables the container for printing to the console when events happen. Default is false.
            <br/> * Requesting for new instances
            <br/> * Instantiating
            <br/> * Disposing
            </summary>
            <param name="enabled">flag to enable or disable console priting.</param>
        </member>
    </members>
</doc>

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Onbox.Abstractions.VDev</name>
    </assembly>
    <members>
        <member name="T:Onbox.Abstractions.VDev.IContainer">
            <summary>
            Onbox's IOC container contract
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IContainer.AddSingleton(System.Type)">
            <summary>
            Adds an implementation as a singleton on the container.
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IContainer.AddSingleton``1">
            <summary>
            Adds an implementation as a singleton on the container.
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IContainer.AddSingleton``1(``0)">
            <summary>
            Adds an instance as a singleton on the container
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IContainer.AddSingleton(System.Type,System.Type)">
            <summary>
            Adds an implementation to a contract as a singleton on the container
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IContainer.AddSingleton``2">
            <summary>
            Adds an implementation to a contract as a singleton on the container
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IContainer.AddSingleton``2(``1)">
            <summary>
            Adds an instance as a singleton on the container
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IContainer.AddScoped(System.Type,System.Type)">
            <summary>
            Adds a scoped implementation to a contract on the container.
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IContainer.AddScoped``2">
            <summary>
            Adds a scoped implementation to a contract on the container.
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IContainer.AddScoped(System.Type)">
            <summary>
            Adds a scoped implementation on the container.
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IContainer.AddScoped``1">
            <summary>
            Adds a scoped implementation on the container.
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IContainer.AddTransient(System.Type)">
            <summary>
            Adds an implementation as transient on the container
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IContainer.AddTransient``1">
            <summary>
            Adds an implementation as a transient on the container.
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IContainer.AddTransient(System.Type,System.Type)">
            <summary>
            Adds an implementation to a contract as transient on the container
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IContainer.AddTransient``2">
            <summary>
            Adds an implementation to a contract as transient on the container
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IContainer.Clear">
            <summary>
            Resets the entire container
            </summary>
        </member>
        <member name="T:Onbox.Abstractions.VDev.IContainerConsolePrint">
            <summary>
            Contract Type for printing Container events to the console
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IContainerConsolePrint.EnableConsolePrinting(System.Boolean)">
            <summary>
            Enables console writeline for important events on the container. E.g: When the container is instantiating an object.
            </summary>
            <param name="enabled">flag to enable or disable console priting.</param>
        </member>
        <member name="T:Onbox.Abstractions.VDev.IContainerPipeline">
            <summary>
            Container pipeline is used to add dependencies and compose a container
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IContainerPipeline.Pipe(Onbox.Abstractions.VDev.IContainer)">
            <summary>
            Adds dependencies to the container and returns it
            </summary>
        </member>
        <member name="T:Onbox.Abstractions.VDev.IContainerResolver">
            <summary>
            Onbox's IOC container read only contract
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IContainerResolver.Resolve``1">
            <summary>
            Asks the container for a new instance of a type
            <br>An exception will be thrown for non registered abstract types in the dependency tree</br>
            <br>The container will automatically resolve non registered concrete types in the dependency tree</br>
            <br>Check ResolveOrNull() for exception free version</br>
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IContainerResolver.ResolveOrNull``1">
            <summary>
            Asks the container for a new instance of a type
            <br>It will return null if any non registered abstract type in the dependency tree</br>
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IContainerResolver.Resolve(System.Type)">
            <summary>
            Asks the container for a new instance of a type
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IContainerResolver.CreateScope">
            <summary>
            Creates a scoped context copy of this container
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IContainerResolver.HasSingletonInstance``1">
            <summary>
            Checks if a singleton instance for this type is registered in the container
            </summary>
            <typeparam name="T">The target type, abstract or concrete</typeparam>
            <returns>true if the type is registered, false if not</returns>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IContainerResolver.HasScopedInstance``1">
            <summary>
            Checks if a scoped instance for this type is registered in the container
            </summary>
            <typeparam name="T">The target type, abstract or concrete</typeparam>
            <returns>true if the type is registered, false if not</returns>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IContainerResolver.IsScope">
            <summary>
            Reports if this container is a scope of a container
            </summary>
        </member>
        <member name="T:Onbox.Abstractions.VDev.IContainerResolverPipeline">
            <summary>
            Container Resolver pipeline is used to resolve dependencies or cleanup the dependencies of the container
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IContainerResolverPipeline.Pipe(Onbox.Abstractions.VDev.IContainerResolver)">
            <summary>
            Pipes the container resolver and its dependencies
            </summary>
        </member>
        <member name="T:Onbox.Abstractions.VDev.IHttpService">
            <summary>
            Onbox's contract for Http requests.
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IHttpService.GetAsync``1(System.String,System.String)">
            <summary>
            Send a GET request to the specified Uri as an asynchronous operation.
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IHttpService.GetStreamAsync(System.String,System.String)">
            <summary>
            Send a GET request to the specified Uri and return the response body as a stream in an asynchronous operation.
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IHttpService.DeleteAsync``1(System.String,System.String)">
            <summary>
            Send a DELETE request to the specified Uri and return the response body as an asynchronous operation.
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IHttpService.DeleteAsync(System.String,System.String)">
            <summary>
            Send a DELETE request to the specified Uri as an asynchronous operation.
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IHttpService.PutAsync``1(System.String,System.Object,System.String)">
            <summary>
            Send a PUT request to the specified Uri and return the response body as an asynchronous operation.
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IHttpService.PutAsync(System.String,System.Object,System.String)">
            <summary>
            Send a PUT request to the specified Uri as an asynchronous operation.
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IHttpService.PutStreamAsync``1(System.String,System.IO.Stream,System.String)">
            <summary>
            Send a PUT stream request to the specified Uri and return the response body as an asynchronous operation.
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IHttpService.PutStreamAsync(System.String,System.IO.Stream,System.String)">
            <summary>
            Send a PUT stream request to the specified Uri as an asynchronous operation.
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IHttpService.PutRequestStreamAsync(System.String,System.Object,System.String)">
            <summary>
            Send a PUT request to the specified Uri and return the response body as a stream in an asynchronous operation.
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IHttpService.PostAsync``1(System.String,System.Object,System.String)">
            <summary>
            Send a POST request to the specified Uri and return the response body as an asynchronous operation.
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IHttpService.PostFormAsync``1(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Send a POST form request to the specified Uri and return the response body as an asynchronous operation.
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IHttpService.PostAsync(System.String,System.Object,System.String)">
            <summary>
            Send a POST request to the specified Uri as an asynchronous operation.
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IHttpService.PostStreamAsync``1(System.String,System.IO.Stream,System.String)">
            <summary>
            Send a POST stream request to the specified Uri and return the response body as an asynchronous operation.
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IHttpService.PostStreamAsync(System.String,System.IO.Stream,System.String)">
            <summary>
            Send a POST stream request to the specified Uri as an asynchronous operation.
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IHttpService.PostRequestStreamAsync(System.String,System.Object,System.String)">
            <summary>
            Send a POST request to the specified Uri and return the response body as a stream in an asynchronous operation.
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IHttpService.PatchAsync``1(System.String,System.Object,System.String)">
            <summary>
            Send a PATCH request to the specified Uri and return the response body as an asynchronous operation.
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IHttpService.PatchAsync(System.String,System.Object,System.String)">
            <summary>
            Send a PATCH request to the specified Uri as an asynchronous operation.
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IHttpService.AddHeader(System.String,System.String)">
            <summary>
            Add a header for all subsequent requests
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IHttpService.ClearHeaders">
            <summary>
            Clears all headers for all subsequent requests
            </summary>
        </member>
        <member name="T:Onbox.Abstractions.VDev.IJsonService">
            <summary>
            Default contract for dealing with serialization / deserialization
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IJsonService.Deserialize``1(System.String)">
            <summary>
            Deserializes an object
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IJsonService.Serialize(System.Object)">
            <summary>
            Serializes an object
            </summary>
        </member>
        <member name="T:Onbox.Abstractions.VDev.ILoggingService">
            <summary>
            The contract for logging activities
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.ILoggingService.Error(System.String)">
            <summary>
            Logs an error
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.ILoggingService.Exception(System.Exception)">
            <summary>
            Logs an exception
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.ILoggingService.Log(System.String)">
            <summary>
            Logs a message
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.ILoggingService.Warning(System.String)">
            <summary>
            Logs a warning
            </summary>
        </member>
        <member name="T:Onbox.Abstractions.VDev.IMapper">
            <summary>
            Onbox Mapper can clone objects and map properties and lists
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IMapper.Map``2(``0,``1)">
            <summary>
            Clones an object (Maps to a new instance)
            </summary>
            <returns>The cloned object with all properties copied</returns>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IMapper.Clone``1(``0)">
            <summary>
            Clones an object (Maps to a new instance)
            </summary>
            <returns>The cloned object with all properties copied</returns>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IMapper.Clone``1(System.Object)">
            <summary>
            Clones an object (Maps to a new instance)
            </summary>
            <returns>The cloned object with all properties copied</returns>
        </member>
        <member name="T:Onbox.Abstractions.VDev.IMessageService">
            <summary>
            Contract for messaging activities
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IMessageService.Error(System.String)">
            <summary>
            Shows an error message
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IMessageService.Question(System.String)">
            <summary>
            Shows a question message
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IMessageService.SetTitle(System.String)">
            <summary>
            Sets the title of the messages
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IMessageService.Show(System.String)">
            <summary>
            Shows a message
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IMessageService.Warning(System.String)">
            <summary>
            Shows a warning message
            </summary>
        </member>
        <member name="T:Onbox.Abstractions.VDev.IProgressIndicator">
            <summary>
            Contract that reports information each iteration
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IProgressIndicator.FinishedSuccessfully">
            <summary>
            Indicates if the process has finished and was successful
            </summary>
            <returns></returns>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IProgressIndicator.Iterate(System.String)">
            <summary>
            Adds one iteration to the process with a given message
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IProgressIndicator.Run(System.Int32,System.Boolean,System.Action)">
            <summary>
            Runs progress action
            </summary>
        </member>
        <member name="M:Onbox.Abstractions.VDev.IProgressIndicator.Reset(System.Int32)">
            <summary>
            Resets the progress
            </summary>
        </member>
    </members>
</doc>
